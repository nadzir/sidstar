name: Pipeline

env:
  AZURE_CONTAINER_REGISTRY: thales
  PROJECT_NAME: app
  RESOURCE_GROUP: thales
  AKS_CLUSTER_NAME: thales-aks
  REGISTRY_URL: thales.azurecr.io

on: push

jobs:
  test:
    name: 'Test'
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout
        uses: actions/checkout@v3
    
      - name: Run script file
        run: |
           cd application
           pip install -r requirements-dev.txt
           pip install -r requirements.txt
        shell: bash

      - name: Run pytest
        uses: pavelzw/pytest-action@v2
        with:
          verbose: true
          emoji: true
          job-summary: true
          click-to-expand: true

  build:
    name: 'Build'
    runs-on: ubuntu-latest
    needs: test
    if: github.ref_name == 'main'
 
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Docker Login
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Docker Push
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: thales.azurecr.io/app:${{ github.sha }}
        context: application
    
    - uses: azure/container-scan@v0
      continue-on-error: true
      with:
        image-name: thales.azurecr.io/app:${{ github.sha }}
    
  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_name == 'main'
 
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'

    - uses: azure/use-kubelogin@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        kubelogin-version: 'latest'
    
    - uses: azure/aks-set-context@v3
      with:
         resource-group: ${{ env.RESOURCE_GROUP }}
         cluster-name: ${{ env.AKS_CLUSTER_NAME }}
         admin: 'false'
         use-kubelogin: 'true'
    
    - uses: azure/setup-helm@v3

    - name: Helm Deploy
      run: |
         cd kubernetes/helm/charts/application
         helm upgrade --install --namespace app --create-namespace -f values.yaml --set image.tag=${{ github.sha }} app .
      shell: bash
  
  checks:
    name: 'Post Deployment Checks'
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref_name == 'main'
 
    steps:
    - name: Health Check
      run: |
        curl --fail-with-body http://thales.ethsock.com/health
      shell: bash